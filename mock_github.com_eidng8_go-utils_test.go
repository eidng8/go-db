// Code generated by mockery v2.50.0. DO NOT EDIT.

package db

import mock "github.com/stretchr/testify/mock"

// MockTaggedLogger is an autogenerated mock type for the TaggedLogger type
type MockTaggedLogger struct {
	mock.Mock
}

type MockTaggedLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaggedLogger) EXPECT() *MockTaggedLogger_Expecter {
	return &MockTaggedLogger_Expecter{mock: &_m.Mock}
}

// Debugf provides a mock function with given fields: format, args
func (_m *MockTaggedLogger) Debugf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockTaggedLogger_Debugf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debugf'
type MockTaggedLogger_Debugf_Call struct {
	*mock.Call
}

// Debugf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockTaggedLogger_Expecter) Debugf(format interface{}, args ...interface{}) *MockTaggedLogger_Debugf_Call {
	return &MockTaggedLogger_Debugf_Call{Call: _e.mock.On("Debugf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockTaggedLogger_Debugf_Call) Run(run func(format string, args ...interface{})) *MockTaggedLogger_Debugf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockTaggedLogger_Debugf_Call) Return() *MockTaggedLogger_Debugf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTaggedLogger_Debugf_Call) RunAndReturn(run func(string, ...interface{})) *MockTaggedLogger_Debugf_Call {
	_c.Run(run)
	return _c
}

// Errorf provides a mock function with given fields: format, args
func (_m *MockTaggedLogger) Errorf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockTaggedLogger_Errorf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorf'
type MockTaggedLogger_Errorf_Call struct {
	*mock.Call
}

// Errorf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockTaggedLogger_Expecter) Errorf(format interface{}, args ...interface{}) *MockTaggedLogger_Errorf_Call {
	return &MockTaggedLogger_Errorf_Call{Call: _e.mock.On("Errorf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockTaggedLogger_Errorf_Call) Run(run func(format string, args ...interface{})) *MockTaggedLogger_Errorf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockTaggedLogger_Errorf_Call) Return() *MockTaggedLogger_Errorf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTaggedLogger_Errorf_Call) RunAndReturn(run func(string, ...interface{})) *MockTaggedLogger_Errorf_Call {
	_c.Run(run)
	return _c
}

// Infof provides a mock function with given fields: format, args
func (_m *MockTaggedLogger) Infof(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockTaggedLogger_Infof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infof'
type MockTaggedLogger_Infof_Call struct {
	*mock.Call
}

// Infof is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockTaggedLogger_Expecter) Infof(format interface{}, args ...interface{}) *MockTaggedLogger_Infof_Call {
	return &MockTaggedLogger_Infof_Call{Call: _e.mock.On("Infof",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockTaggedLogger_Infof_Call) Run(run func(format string, args ...interface{})) *MockTaggedLogger_Infof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockTaggedLogger_Infof_Call) Return() *MockTaggedLogger_Infof_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTaggedLogger_Infof_Call) RunAndReturn(run func(string, ...interface{})) *MockTaggedLogger_Infof_Call {
	_c.Run(run)
	return _c
}

// PanicIfError provides a mock function with given fields: err
func (_m *MockTaggedLogger) PanicIfError(err error) {
	_m.Called(err)
}

// MockTaggedLogger_PanicIfError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PanicIfError'
type MockTaggedLogger_PanicIfError_Call struct {
	*mock.Call
}

// PanicIfError is a helper method to define mock.On call
//   - err error
func (_e *MockTaggedLogger_Expecter) PanicIfError(err interface{}) *MockTaggedLogger_PanicIfError_Call {
	return &MockTaggedLogger_PanicIfError_Call{Call: _e.mock.On("PanicIfError", err)}
}

func (_c *MockTaggedLogger_PanicIfError_Call) Run(run func(err error)) *MockTaggedLogger_PanicIfError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockTaggedLogger_PanicIfError_Call) Return() *MockTaggedLogger_PanicIfError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTaggedLogger_PanicIfError_Call) RunAndReturn(run func(error)) *MockTaggedLogger_PanicIfError_Call {
	_c.Run(run)
	return _c
}

// Panicf provides a mock function with given fields: format, args
func (_m *MockTaggedLogger) Panicf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockTaggedLogger_Panicf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Panicf'
type MockTaggedLogger_Panicf_Call struct {
	*mock.Call
}

// Panicf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockTaggedLogger_Expecter) Panicf(format interface{}, args ...interface{}) *MockTaggedLogger_Panicf_Call {
	return &MockTaggedLogger_Panicf_Call{Call: _e.mock.On("Panicf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockTaggedLogger_Panicf_Call) Run(run func(format string, args ...interface{})) *MockTaggedLogger_Panicf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockTaggedLogger_Panicf_Call) Return() *MockTaggedLogger_Panicf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTaggedLogger_Panicf_Call) RunAndReturn(run func(string, ...interface{})) *MockTaggedLogger_Panicf_Call {
	_c.Run(run)
	return _c
}

// NewMockTaggedLogger creates a new instance of MockTaggedLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaggedLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaggedLogger {
	mock := &MockTaggedLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
